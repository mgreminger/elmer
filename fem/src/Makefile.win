#/*****************************************************************************/
# *
# *  Elmer, A Finite Element Software for Multiphysical Problems
# *
# *  Copyright 1st April 1995 - , CSC - IT Center for Science Ltd., Finland
# * 
# *  This program is free software; you can redistribute it and/or
# *  modify it under the terms of the GNU General Public License
# *  as published by the Free Software Foundation; either version 2
# *  of the License, or (at your option) any later version.
# * 
# *  This program is distributed in the hope that it will be useful,
# *  but WITHOUT ANY WARRANTY; without even the implied warranty of
# *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# *  GNU General Public License for more details.
# *
# *  You should have received a copy of the GNU General Public License
# *  along with this program (in file fem/GPL-2); if not, write to the 
# *  Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, 
# *  Boston, MA 02110-1301, USA.
# *
# *****************************************************************************/
#
#/******************************************************************************
# *
# *  WINDOWS Makefile for ElmerSolver
# *
# ******************************************************************************
# *
# *  Authors: Juha Ruokolainen
# *  Email:   Juha.Ruokolainen@csc.fi
# *  Web:     http://www.csc.fi/elmer
# *  Address: CSC - IT Center for Science Ltd.
# *           Keilaranta 14
# *           02101 Espoo, Finland 
# *
# *  Original Date: 26.9.1995
# *
# *****************************************************************************/
TMPDIR	= \temp
CTMPDIR	= \\temp

LIBDIR	= $(ELMER_PREFIX_DBS)\\lib
BINDIR	= $(ELMER_PREFIX_DBS)\\bin
INCLDIR = $(ELMER_PREFIX_DBS)\\include

LIBINSTDIR	= $(ELMER_PREFIX)\lib
BININSTDIR	= $(ELMER_PREFIX)\bin
INCLINSTDIR	= $(ELMER_PREFIX)\include

LIBRARY   =	$(LIBDIR)\\libfem.lib

include make.bin
all: $(LIBRARY) $(SOLVER) $(BINARIES) $(BINARIES_ODD) install

OBJ_EXT =	.obj
include make.inc

INCLUDES=	-I. -I $(INCLDIR)

MV	=	ren
CP	=	copy
RM	=	del
AR	=	lib
CPP	=	cl $(INCLUDES) -DWIN32 -DUSE_ARPACK -DUSE_SPARSE -DFULL_INDUCTION -DCYLSYM \
			-DDLLEXPORT="!DEC$$ATTRIBUTES DLLEXPORT::" -EP -C -Tc 
F90	=	f90 -optimize:4 -inline:speed -unroll=8
F77	=	f77 -optimize:4 -inline:all -unroll=8
CC	=	cl -Gz $(INCLUDES) -DWIN32
LD	=	link

DLLLIBS	= $(LIBDIR)\\libfem.lib \
	  $(LIBDIR)\\libpariter.lib \
	  $(LIBDIR)\\libhuti.lib    \
	  $(LIBDIR)\\libEIOF.lib    \
	  $(LIBDIR)\\libmatc.lib    \
	  $(LIBDIR)\\libamd.lib    \
	  $(LIBDIR)\\libumfpack.lib    \
	  $(LIBDIR)\\libarpack.lib  \
	  $(LIBDIR)\\liblapack.lib  \
	  $(LIBDIR)\\libsparse.lib    \
	  $(LIBDIR)\\libblas.lib    



SLLLIBS	= \
	  $(LIBDIR)\\libpariter.lib \
	  $(LIBDIR)\\libhuti.lib    \
	  $(LIBDIR)\\libEIOF.lib    \
	  $(LIBDIR)\\libmatc.lib    \
	  $(LIBDIR)\\libamd.lib    \
	  $(LIBDIR)\\libumfpack.lib    \
	  $(LIBDIR)\\libarpack.lib  \
	  $(LIBDIR)\\liblapack.lib  \
	  $(LIBDIR)\\libsparse.lib    \
	  $(LIBDIR)\\libblas.lib    


LIBS	= Solver.lib

STACK   = /stack:500000000 /nologo /subsystem:console /incremental:no

LDFLAGS = $(LIBS) $(STACK)

.SUFFIXES: .c .f90 .obj

.f90.obj:
	$(CPP) $< > $(TMPDIR)\$*.f90
	$(F90) $(INCLUDES) -c $(CTMPDIR)\\$*.f90

.c.obj:
	$(CC) -c $(INCLUDES) $<

.f.obj:
	$(CPP) $< > $(TMPDIR)\$*.f
	$(F77) -c $(CTMPDIR)\\$*.f

$(SOLVER): $(LIBRARY) Solver.obj
	$(LD) /dll /out:Solver.dll ElmerSolver.obj mpi_stubs.obj $(DLLLIBS)
	$(LD) /out:$(SOLVER).exe Solver.obj mpi_stubs.obj $(LDFLAGS)

Solver.obj: Solver.f90
	$(F90) -c Solver.f90

$(RESULT): $(LIBRARY) $(RESULT).obj
	$(LD) /out:$(RESULT).exe $(RESULT).obj $(LDFLAGS)

$(LIBRARY): $(OBJS)
	$(AR) -out:$(LIBRARY) $(OBJS)

$(ADVDIFF): $(OBJS) $(ADVDIFF).f90
	$(F90) -dll -I$(INCLUDES) $(ADVDIFF).f90 Solver.lib $(SLLLIBS)

$(STATMAG): $(OBJS) $(STATMAG).f90
	$(F90) -dll -I$(INCLUDES) $(STATMAG).f90 Solver.lib $(SLLLIBS)

$(ELASTIC): $(OBJS) $(ELASTIC).f90
	$(F90) -dll -I$(INCLUDES) $(ELASTIC).f90 Solver.lib $(SLLLIBS)

$(HELMHOLTZ): $(OBJS) $(HELMHOLTZ).f90
	$(F90) -dll -I$(INCLUDES) $(HELMHOLTZ).f90 Solver.lib $(SLLLIBS)

$(ACOUSTICS): $(OBJS) $(ACOUSTICS).f90
	$(F90) -dll -I$(INCLUDES) $(ACOUSTICS).f90 Solver.lib $(SLLLIBS)

$(DH): $(OBJS) $(DH).f90
	$(F90) -dll -I$(INCLUDES) $(DH).f90 Solver.lib $(SLLLIBS)

$(IRROTVEL): $(OBJS) $(IRROTVEL).f90
	$(F90) -dll -I$(INCLUDES) $(IRROTVEL).f90 Solver.lib $(SLLLIBS)

$(SHEARWAVE): $(OBJS) $(SHEARWAVE).f90
	$(F90) -dll -I$(INCLUDES) $(SHEARWAVE).f90 Solver.lib $(SLLLIBS)

$(CHANGERATE): $(OBJS) $(CHANGERATE).f90
	$(F90) -dll -I$(INCLUDES) $(CHANGERATE).f90 Solver.lib $(SLLLIBS)

$(TRANSPORTEQ): $(OBJS) $(TRANSPORTEQ).f90
	$(F90) -dll -I$(INCLUDES) $(TRANSPORTEQ).f90 Solver.lib $(SLLLIBS)

$(FDIFF): $(OBJS) $(FDIFF).f90
	$(F90) -dll -I$(INCLUDES) $(FDIFF).f90 Solver.lib $(SLLLIBS)

$(FDIFF3D): $(OBJS) $(FDIFF3D).f90
	$(F90) -dll -I$(INCLUDES) $(FDIFF3D).f90 Solver.lib $(SLLLIBS)

$(SAVEDATA): $(OBJS) $(SAVEDATA).f90
	$(F90) -dll -I$(INCLUDES) $(SAVEDATA).f90 Solver.lib $(SLLLIBS)

$(STATELEC): $(OBJS) $(STATELEC).f90
	$(F90) -dll -I$(INCLUDES) $(STATELEC).f90 Solver.lib $(SLLLIBS)

$(STATCUR): $(OBJS) $(STATCUR).f90
	$(F90) -dll -I$(INCLUDES) $(STATCUR).f90 Solver.lib $(SLLLIBS)

$(FREERED): $(OBJS) $(FREERED).f90
	$(F90) -dll -I$(INCLUDES) $(FREERED).f90 Solver.lib $(SLLLIBS)

$(FORCE): $(OBJS) $(FORCE).f90
	$(F90) -dll -I$(INCLUDES) $(FORCE).f90 Solver.lib $(SLLLIBS)

$(ELECFORCE): $(OBJS) $(ELECFORCE).f90
	$(F90) -dll -I$(INCLUDES) $(ELECFORCE).f90 Solver.lib $(SLLLIBS)

$(ARTIF): $(OBJS) $(ARTIF).f90
	$(F90) -dll -I$(INCLUDES) $(ARTIF).f90 Solver.lib $(SLLLIBS)

$(SMITC): $(OBJS) $(SMITC).f90
	$(F90) -dll -I$(INCLUDES) $(SMITC).f90 Solver.lib $(SLLLIBS)

$(MEMREYNO): $(OBJS) $(MEMREYNO).f90
	$(F90) -c -I$(INCLUDES) MEMUtilities.f90
	$(F90) -dll -I$(INCLUDES) $(MEMREYNO).f90 MEMUtilities.obj Solver.lib $(SLLLIBS)

$(MEMELSTAT): $(OBJS) $(MEMELSTAT).f90
	$(F90) -c -I$(INCLUDES) MEMUtilities.f90
	$(F90) -dll -I$(INCLUDES) $(MEMELSTAT).f90 MEMUtilities.obj Solver.lib $(SLLLIBS)

$(MEMLUMP): $(OBJS) $(MEMLUMP).f90
	$(F90) -dll -I$(INCLUDES) $(MEMLUMP).f90 Solver.lib $(SLLLIBS)

$(DCRCOMPLEX): $(OBJS) $(DCRCOMPLEX).f90
	$(F90) -dll -I$(INCLUDES) $(DCRCOMPLEX).f90 Solver.lib $(SLLLIBS)

$(RIGIDBODY): $(OBJS) $(RIGIDBODY).f90
	$(F90) -dll -I$(INCLUDES) $(RIGIDBODY).f90 Solver.lib $(SLLLIBS)

$(DIRICHLET): $(OBJS) $(DIRICHLET).f90
	$(F90) -dll -I$(INCLUDES) $(DIRICHLET).f90 Solver.lib $(SLLLIBS)

$(INPUT): $(OBJS) $(INPUT).f90
	$(F90) -dll -I$(INCLUDES) $(INPUT).f90 Solver.lib $(SLLLIBS)

$(HELMHOLTZ_BEM): $(OBJS) $(HELMHOLTZ_BEM).f90
	$(CPP)  $(HELMHOLTZ_BEM).f90 > $(TMPDIR)\$(HELMHOLTZ_BEM).f90
	$(F90) -dll -I$(INCLUDES) $(CTMPDIR)\\$(HELMHOLTZ_BEM).f90 solve_cmplx.f Solver.lib $(SLLLIBS)

$(POISSON_BEM): $(OBJS) $(POISSON_BEM).f90
	$(CPP)  $(POISSON_BEM).f90 > $(TMPDIR)\$(POISSON_BEM).f90
	$(F90) -dll -I$(INCLUDES) $(CTMPDIR)\\$(POISSON_BEM).f90 solve_real.f Solver.lib $(SLLLIBS)

$(PERIODIC): $(OBJS) $(PERIODIC).f90
	$(F90) -dll -I$(INCLUDES) $(PERIODIC).f90 Solver.lib $(SLLLIBS)

$(SC2ELMER): $(OBJS) $(SC2ELMER).c
	cl $(SC2ELMER).c

$(FREESURF): $(OBJS) $(FREESURF).f90
	$(F90) -dll -I$(INCLUDES) $(FREESURF).f90 Solver.lib $(SLLLIBS)

$(STREAM): $(OBJS) $(STREAM).f90
	$(F90) -dll -I$(INCLUDES) $(STREAM).f90 Solver.lib $(SLLLIBS)

$(KE): $(OBJS) $(KE).f90
	$(F90) -dll -I$(INCLUDES) $(KE).f90 Solver.lib $(SLLLIBS)

$(POISBOLTZ): $(OBJS) $(POISBOLTZ).f90
	$(F90) -dll -I$(INCLUDES) $(POISBOLTZ).f90 Solver.lib $(SLLLIBS)


install:	
	$(CP) elements.def $(LIBINSTDIR)
	$(CP) SOLVER.KEYWORDS $(LIBINSTDIR)
	$(CP) *.mod $(INCLINSTDIR)
	$(CP) Solver.lib    	$(LIBINSTDIR)
	$(CP) Solver.dll        $(BININSTDIR)
	$(CP) $(SOLVER).exe     $(BININSTDIR)
	$(CP) $(RESULT).exe     $(BININSTDIR)
	$(CP) $(ADVDIFF).dll    $(BININSTDIR)
	$(CP) $(STATMAG).dll    $(BININSTDIR)
	$(CP) $(STATELEC).dll   $(BININSTDIR)
	$(CP) $(FDIFF).dll      $(BININSTDIR)
	$(CP) $(FDIFF3D).dll    $(BININSTDIR)
	$(CP) $(SAVEDATA).dll   $(BININSTDIR)
	$(CP) $(ELASTIC).dll    $(BININSTDIR)
	$(CP) $(HELMHOLTZ).dll  $(BININSTDIR)
	$(CP) $(ACOUSTICS).dll  $(BININSTDIR)
	$(CP) $(DH).dll         $(BININSTDIR)
	$(CP) $(IRROTVEL).dll   $(BININSTDIR)
	$(CP) $(SHEARWAVE).dll  $(BININSTDIR)
	$(CP) $(CHANGERATE).dll  $(BININSTDIR)
	$(CP) $(TRANSPORTEQ).dll  $(BININSTDIR)
	$(CP) $(ARTIF).dll      $(BININSTDIR)
	$(CP) $(RIGIDBODY).dll  $(BININSTDIR)
	$(CP) $(DIRICHLET).dll  $(BININSTDIR)
	$(CP) $(DCRCOMPLEX).dll $(BININSTDIR)
	$(CP) $(FREERED).dll    $(BININSTDIR)
	$(CP) $(STATCUR).dll    $(BININSTDIR)
	$(CP) $(FORCE).dll      $(BININSTDIR)
	$(CP) $(ELECFORCE).dll  $(BININSTDIR)
	$(CP) $(INPUT).dll      $(BININSTDIR)
	$(CP) $(PERIODIC).dll   $(BININSTDIR)
	$(CP) $(HELMHOLTZ_BEM).dll $(BININSTDIR)
	$(CP) $(POISSON_BEM).dll   $(BININSTDIR)
	$(CP) $(SC2ELMER).exe      $(BININSTDIR)
	$(CP) $(FREESURF).dll      $(BININSTDIR)
	$(CP) $(SMITC).dll	   $(BININSTDIR)
	$(CP) $(ELECREDUC).dll	   $(BININSTDIR)
	$(CP) $(REYNOLDS).dll	   $(BININSTDIR)
	$(CP) $(MEMREYNO).dll	   $(BININSTDIR)
	$(CP) $(MEMELSTAT).dll	   $(BININSTDIR)
	$(CP) $(MEMLUMP).dll	   $(BININSTDIR)
	$(CP) $(REYNOLDS).dll	   $(BININSTDIR)
	$(CP) $(APERTURE).dll	   $(BININSTDIR)
	$(CP) $(STREAM).dll	   $(BININSTDIR)
	$(CP) $(KE).dll		   $(BININSTDIR)

clean:
	$(RM) *.obj *.mod *.exe *.dll

