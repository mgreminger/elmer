! ******************************************************************************
! *
! *  Authors: Peter Råback & Juha Ruokolainen
! *  Email:   Peter.Raback@csc.fi & Juha.Ruokolainen@csc.fi
! *  Web:     http://www.csc.fi/elmer
! *  Address: CSC - IT Center for Science Ltd.
! *           Keilaranta 14
! *           02101 Espoo, Finland 
! *
! *  Original Date: 26.5.2010
! *
! *****************************************************************************/

!------------------------------------------------------------------------------
!>  Subroutines for tracking a particle in presense of convection and 
!>  electrostatic fields. 
!> This is the first generation solver of the topic and will not be further developed.
!> \ingroup Solvers
!------------------------------------------------------------------------------
SUBROUTINE ParticleTracker( Model,Solver,dt,TransientSimulation )
!------------------------------------------------------------------------------
  USE DefUtils
  USE Interpolation

  IMPLICIT NONE
!------------------------------------------------------------------------------
  TYPE(Solver_t), TARGET :: Solver
  TYPE(Model_t) :: Model
  REAL(KIND=dp) :: dt
  LOGICAL :: TransientSimulation
!------------------------------------------------------------------------------
! Local variables
!------------------------------------------------------------------------------

  TYPE(Mesh_t), POINTER :: Mesh
  TYPE(Variable_t), POINTER :: Var
  CHARACTER(LEN=MAX_NAME_LEN) :: VariableName
  LOGICAL :: GotPotField, GotVeloField, GotIt, &
       OutOfScope, Tracer, SetHrel, Debug, &
       SaveIntermediateSteps, NumberFilesByParticles, NumberFilesBySteps
  INTEGER :: i,j,k,dim,no,nstep,nodims,noparticles,counter(10),VeloFieldDofs, &
       IntegMethod, VisitedTimes = 0
  INTEGER, POINTER :: PotFieldPerm(:),VeloFieldPerm(:),Inds(:)
  REAL(KIND=dp) :: maxdist, dtime, dtime0, dtimeprev, tottime, time, time0, &
      dtimemin, dTimemax, mass, charge, dragcoeff, ds, Hrel, HrelMin, HrelMax, &
      GradPotAtPoint(3), VeloAtPoint(3), GradVeloAtPoint(3,3), GlobalCoords(3), &
      Accel(3), PrevVelo(3), NewVelo(3), AveVelo(3), dCoord(3), ElementH, Speed, &
      Gravity(3), PseudoNorm
  REAL(KIND=dp), POINTER :: Coords(:), Velo(:), PotField(:),VeloField(:),Dist(:),gWork(:,:)

  SAVE VisitedTimes, NoParticles, time0, nstep, dim, Coords, &
      mass, charge, dragcoeff, GotPotField, GotVeloField, Tracer, &
      Dist, Inds, VeloField, VeloFieldPerm, VeloFieldDofs, PotField, PotFieldPerm, &
      Velo


!------------------------------------------------------------------------------

  CALL Info('ParticleTracker','-----------------------------------------', Level=4 )
  CALL Info('ParticleTracker','Tracking the path of the particle',Level=4)

  Mesh => Solver % Mesh
  DIM = CoordinateSystemDimension()
  counter = 0


  ! Do some initalialization: allocate space, check fields  
  !-------------------------------------------------------------------------

  IF( VisitedTimes == 0 ) THEN

    NoParticles = GetInteger( Solver % Values,'Number of Particles') 
    IF( NoParticles == 0 ) THEN
      CALL Fatal('ParticleTracker','Give Number of Particles for tracking')
    END IF

    ALLOCATE(Coords(NoParticles*DIM),Velo(NoParticles*DIM),Dist(NoParticles),Inds(DIM))
    
    GotVeloField = .FALSE.
    VariableName = ListGetString( Solver % Values,'Velocity Field Name',GotIt )
    IF(GotIt) THEN
      Var => VariableGet( Model % Variables, TRIM(VariableName) )
      GotVeloField = ASSOCIATED( Var )
      IF ( GotVeloField )  THEN
        VeloField => Var % Values
        VeloFieldPerm => Var % Perm
        VeloFieldDofs = Var % DOFs
      ELSE
        CALL Warn('ParticleTracker','Velocity field variable does not exist: '//TRIM(VariableName))
      END IF
    END IF

    GotPotField = .FALSE.
    VariableName = ListGetString( Solver % Values,'Potential Field Name',GotIt )
    IF(GotIt) THEN
      Var => VariableGet( Model % Variables, TRIM(VariableName) )
      GotPotField = ASSOCIATED( Var )
      IF ( GotPotField )  THEN
        GotPotField = .TRUE.
        PotField => Var % Values
        PotFieldPerm => Var % Perm
      ELSE
        CALL Warn('ParticleTracker','Potential field variable does not exist: '//TRIM(VariableName))
      END IF
    END IF

    Tracer = GetLogical( Solver % Values,'Tracer Particle',GotIt )
  END IF


  ! Initialize particles at first time visiting, or each time if requested
  !-------------------------------------------------------------------------

  IF( VisitedTimes == 0 .OR. &
      GetLogical( Solver % Values,'Reinitialize Particles',GotIt) ) THEN
    time0 = 0.0_dp    
    CALL InitializeParticles( Coords, Velo, Dist )   

!   PRINT *,'Start Coords:',Coords,' Velo:',Velo
  END IF


  ! Set up the trackinig problem for this calling, tottime could vary
  !-------------------------------------------------------------------------
  IF( TransientSimulation ) THEN
    tottime = dt
  ELSE   
    tottime = GetCReal(Solver % Values,'Max Tracking Time')
  END IF
  nstep = GetInteger( Solver % Values,'Max Tracking Steps')
  dtime0 = tottime / nstep

  dtimemax = GetCReal(Solver % Values,'Max Tracking Timestep',GotIt)
  IF(.NOT. GotIt) dtimemax = HUGE( dtimemax )
  dtimemin = GetCReal(Solver % Values,'Min Tracking Timestep',GotIt)
  IF(.NOT. GotIt) dtimemin = 0.0_dp


  maxdist = GetCReal( Solver % Values,'Max Tracking Dist',GotIt)
  IF(.NOT. GotIt) maxdist = HUGE( maxdist )

  HrelMax =  GetCReal( Solver % Values,'Maximum relative Ds',GotIt)
  IF(.NOT. GotIt) HrelMax = HUGE( HrelMax )
  HrelMin =  GetCReal( Solver % Values,'Minimum relative Ds',GotIt)
  IF(.NOT. GotIt) HrelMin = 0.0_dp
  
  IntegMethod = GetInteger( Solver % Values,'Integration Method',GotIt )
  IF(.NOT. GotIt) THEN
    ! This is cheaper than the 2nd order runge-kutta of available
    IF( Tracer .AND. .NOT. GotPotField ) THEN
      IntegMethod = 2
    ELSE 
      IntegMethod = 3
    END IF
  END IF

  SetHrel = GetLogical( Solver % Values,'Set Relative Ds',GotIt)
  IF( SetHrel ) THEN
    Hrel = GetCReal( Solver % Values,'Relative Ds',GotIt)
    ! Set the default to be 2 hits for each element
    IF(.NOT. GotIt) Hrel = 0.5
  END IF


  ! These physical parameters could basically vary from call to call
  !-------------------------------------------------------------------------
  mass = GetCReal( Solver % Values,'Particle Mass')
  IF( GotPotField ) THEN
    charge = GetCReal( Solver % Values,'Particle Charge')
  ELSE
    charge = 0.0_dp
  END IF
  
  IF( GotVeloField ) THEN
    dragcoeff = GetCReal( Solver % Values,'Particle Drag Coefficient')
  ELSE
    dragcoeff = 0.0_dp
  END IF

  gWork => ListGetConstRealArray( Model % Constants,'Gravity',GotIt)
  IF ( GotIt ) THEN
    Gravity = gWork(1:3,1)*gWork(4,1)
  ELSE
    Gravity = 0.0_dp
  END IF


  ! Select the saving mode
  !-------------------------------------------------------------------------
  NumberFilesByParticles = GetLogical( Solver % Values,&
      'File Numbering By Particles',GotIt) 
  NumberFilesBySteps = GetLogical( Solver % Values,&
      'File Numbering By Steps',GotIt) 
  IF( NumberFilesByParticles .AND. NumberFilesBySteps ) THEN
    CALL Fatal('ParticleTracker','Files may be numbered either by steps or particles')
  END IF

  SaveIntermediateSteps = GetLogical( Solver % Values,'Save Intermediate Steps',GotIt) 
  IF(.NOT. GotIt) SaveIntermediateSteps = (NoParticles == 1)


  ! Initialize and go for it
  !------------------------------------
    
  dtime0 = tottime / nstep
  AveVelo = 0.0_dp
  PrevVelo = 0.0_dp
  NewVelo = 0.0_dp
  GlobalCoords = 0.0_dp

  IF(.NOT. NumberFilesByParticles) CALL OpenParticleFile( )
  

  ! Loop over all particles
  !-------------------------------------------------------------------------------        
  DO No = 1, NoParticles
     
     counter(1) = counter(1) + 1
     IF( NumberFilesByParticles ) CALL OpenParticleFile( )
     
     time = time0 
     GlobalCoords = 0.0_dp

     DO i=1,DIM
       Inds(i)= DIM*(No-1)+i
     END DO


     ! Loop over maximum timesteps
     !-------------------------------------------------------------------------------        
     DO i=1,nstep
       
       counter(2) = counter(2) + 1

       ! Save results at start so that the starting point will be accounted for as well
       !-------------------------------------------------------------------------------        
       IF(SaveIntermediateSteps) CALL SaveParticleStep()


       ! Compute the velocity field and gradient of potential field at the location
       !--------------------------------------------------------------------------------
       GlobalCoords(1:DIM) = Coords(Inds)              
       CALL ComputeFieldsAtPoint(GlobalCoords, OutOfScope, GradPotAtPoint, VeloAtPoint, &
           GradVeloAtPoint, ElementH )       

       ! Exit if the coordinate is not found on the mesh
       ! One could come up with better rules if needed
       !-------------------------------------------------------
       IF( OutOfScope ) EXIT

       ! Set the velocity and timestep using different criteria
       !-------------------------------------------------------
       PrevVelo(1:DIM) = Velo(Inds)       

       IF( Tracer ) THEN
         ! for the tracer particles the velocity depends only on position
         !---------------------------------------------------------------
         IF( GotVeloField ) THEN
           NewVelo = VeloAtPoint        
         ELSE
           NewVelo = 0.0_dp
         END IF
         IF( GotPotField ) THEN
           NewVelo = NewVelo - ( charge / dragcoeff ) * GradPotAtPoint 
         END IF

         Speed = SQRT( SUM( NewVelo(1:DIM) ** 2 ) )
         IF( SetHrel ) THEN
           dtime = Hrel * ElementH / Speed
         ELSE
           dtime = dtime0 
         END IF


!PRINT *,'a1',dtime,Speed,NewVelo(1:2),IntegMethod
       ELSE         
         ! for particles with mass the acceleration is finite 
         !---------------------------------------------------------------
         Accel = Gravity + &
             (  dragcoeff * ( VeloAtPoint - PrevVelo ) + charge * GradPotAtPoint ) / Mass

         ! for the real particle make a test using the previous velocity and then refine
         IF( SetHrel ) THEN
           DO j=1,10
             NewVelo = PrevVelo + dtime * Accel
             Speed = SQRT( SUM( NewVelo(1:DIM) ** 2 ) )
             dtimeprev = dtime
             dtime = Hrel * ElementH / Speed

             ! This doesn't need to be that accurare as it is just timestepping 
             IF( ABS(dtime - dtimeprev) < 0.01 * dtime ) EXIT
           END DO
         ELSE
           dtime = dtime0
           NewVelo = PrevVelo + dtime * Accel
           Speed = SQRT( SUM( NewVelo(1:DIM) ** 2 ) )          
         END IF
       END IF

       ! If timestep is set by using ds as constraint check for timestep min & max
       ! If timestep is set by default timestepping check for ds min & max
       !---------------------------------------------------------------------------
       IF( SetHrel ) THEN
         dtime = MIN( dtime, dtimemax )
         dtime = MAX( dtime, dtimemin )
       ELSE        
         IF( Speed * dtime < HrelMin * ElementH ) dtime = HrelMin * ElementH / Speed
         IF( Speed * dtime > HrelMax * ElementH ) dtime = HrelMax * ElementH / Speed
       END IF


       ! Do not exceed the total integration time
       !---------------------------------------------------------------------------
       IF( dtime + time >= tottime ) THEN
         dtime = tottime - time
       END IF


       ! Update velocities in case there was a change in timestep
       !---------------------------------------------------------------------------
       IF( .NOT. Tracer ) THEN
         NewVelo = PrevVelo + dtime * Accel
       END IF

       ! Use different integration methods to evaluate the mean velocity over timestep
       !------------------------------------------------------------------------------
       IF( IntegMethod == 1 .AND. i > 1) THEN
         ! correction based on history data
         !-----------------------------------------------
         AveVelo =  NewVelo + 0.5_dp * (NewVelo - PrevVelo)
       ELSE IF (IntegMethod == 2 ) THEN
         ! correction based on gradient of velocity 
         !-----------------------------------------------
         dCoord = dtime * NewVelo           
         AveVelo = NewVelo 
         DO j=1,DIM
           AveVelo = AveVelo + 0.5_dp * GradVeloAtPoint(1:3,j) * dCoord(j) 
         END DO
       ELSE IF (IntegMethod == 3 ) THEN
         ! runge-kutta type of second order method
         ! For linear elements with adaptive timestepping based on h it seems dubious that
         ! higher order scheme would be more cost effective 
         !-------------------------------------------------------------------------------
         GlobalCoords(1:DIM) = Coords(Inds) + 0.5_dp * dtime * NewVelo(1:DIM) 
      
         CALL ComputeFieldsAtPoint(GlobalCoords, OutOfScope, GradPotAtPoint, VeloAtPoint )
         IF( OutOfScope ) EXIT

         IF( Tracer ) THEN
           IF( GotVeloField ) THEN
             AveVelo = VeloAtPoint        
           ELSE
             AveVelo = 0.0_dp
           END IF
           IF( GotPotField ) THEN
             AveVelo = AveVelo - ( charge / dragcoeff ) * GradPotAtPoint 
           END IF
         ELSE 
           Accel = Gravity + &
               (  dragcoeff * ( VeloAtPoint - PrevVelo ) + charge * GradPotAtPoint ) / Mass
           AveVelo = PrevVelo + dtime * Accel
         END IF
       ELSE
         ! Do this only if nothing better available
         AveVelo = NewVelo
       END IF
       
       ! Do not exceed the total integration time
       !---------------------------------------------------------------------------
       IF( dtime + time >= tottime ) dtime = tottime - time

       dCoord = dtime * AveVelo
       ds = SQRT( SUM ( dCoord**2 ) )
       time = time + dtime

       Dist(No) = Dist(No) + ds
       Velo(Inds) = NewVelo(1:DIM)
       Coords(Inds) = Coords(Inds) + dCoord(1:DIM)

       ! Check for exit conditions 
       !-------------------------------------------------------------------------
       IF( tottime - time < TINY( time ) ) THEN
         counter(7) = counter(7) + 1
         EXIT
       END IF
       IF( maxdist - Dist(No) < TINY( maxdist) ) THEN
         counter(8) = counter(8) + 1
         EXIT
       END IF

     END DO
     !---- of timesteps


     ! Save the last step and close the file
     CALL SaveParticleStep()     
     IF( NumberFilesByParticles ) CALL CloseParticleFile()

   END DO
   !------- of particles 


   IF(.NOT. NumberFilesByParticles) CALL CloseParticleFile()
   IF( VisitedTimes == 0 ) CALL WriteNamesFile()
   

!   PRINT *,'End Coords:',Coords,' Velo:',Velo

   time0 = time0 + tottime   
   

   CALL Info('ParticleTracker', '-----------------------------------------')
   CALL Info('ParticleTracker','Counter Info')
   WRITE( Message,'(A,T30,I8)') 'Particles sent:',counter(1)
   CALL Info('ParticleTracker',Message)
   WRITE( Message,'(A,T30,I8)') 'Timesteps taken:',counter(2)
   CALL Info('ParticleTracker',Message)
   WRITE( Message,'(A,T30,I8)') 'Field evaluations:',counter(3)
   CALL Info('ParticleTracker',Message)
   WRITE( Message,'(A,T30,I8)') 'Field hits in total:',counter(4)
   CALL Info('ParticleTracker',Message)
   WRITE( Message,'(A,T30,I8)') 'Field hits at same element:',counter(5)
   CALL Info('ParticleTracker',Message)
   WRITE( Message,'(A,T30,I8)') 'Field evaluation misses:',counter(6)
   CALL Info('ParticleTracker',Message)
   WRITE( Message,'(A,T30,I8)') 'Terminations by time:',counter(7)
   CALL Info('ParticleTracker',Message)
   WRITE( Message,'(A,T30,I8)') 'Terminations by distance:',counter(8)
   CALL Info('ParticleTracker',Message)
   

   IF( GetLogical( Solver % Values,'Evaluate Cost Function',GotIt ) ) THEN
     CALL EvaluateCostFunction( ) 
   END IF
   

   VisitedTimes = VisitedTimes + 1

   IF( GetLogical(GetSolverParams(), 'Moving Mesh',GotIt )) THEN
      CALL FreeQuadrantTree( Mesh % RootQuadrant )
      Mesh % RootQuadrant => Null()
   END IF
   
   IF( GetLogical(GetSolverParams(), 'Compute Pseudo Norm',GotIt )) THEN
     ! Pseudonorm mainly to enable tests
     PseudoNorm = SQRT( SUM( Dist ** 2) / NoParticles )
     WRITE( Message, '(a,g15.8,g15.8,a)') '(NRM,RELC): (',PseudoNorm, 0.0_dp,' )' 
     CALL Info( 'ParticleTracker', Message, Level=3 )
   END IF


   CALL Info('ParticleTracker','All done')
   CALL Info('ParticleTracker', '-----------------------------------------', Level=4 )
  

 CONTAINS


   
   !---------------------------------------------------------
   ! Returns values from a normal distribution to be used in 
   ! thermal velocity distribution.
   !---------------------------------------------------------

   FUNCTION NormalRandom() RESULT ( normalrand ) 

     REAL(KIND=dp) :: normalrand,tmp, mean,sigma 
     INTEGER :: flag = 0
     REAL(KIND=dp) :: fac,gsave,rsq,r1,r2 

     SAVE flag,gsave 

     IF (flag == 0) THEN 
       rsq=2.0_dp 

       DO WHILE(rsq >= 1.0_dp .OR. rsq == 0.0_dp ) 
         CALL RANDOM_NUMBER(r1)
         CALL RANDOM_NUMBER(r2)
         r1 = 2.0_dp * r1 - 1.0_dp
         r2 = 2.0_dp * r2 - 1.0_dp
         rsq = r1*r1 + r2*r2 
       ENDDO

       fac = SQRT(-2.0_dp * LOG(rsq) / rsq) 
       gsave = r1 * fac 
       normalrand = r2 * fac 
       flag = 1 
     ELSE 
       normalrand = gsave 
       flag = 0 
     ENDIF

   END FUNCTION NormalRandom



  !------------------------------------------------------------------------
  ! Initialize particle positions and velocities.
  !-------------------------------------------------------------------------
  SUBROUTINE InitializeParticles( Coords, Velo, Dist )

    REAL(KIND=dp), POINTER :: Coords(:), Velo(:), Dist(:)

    CHARACTER(LEN=MAX_NAME_LEN) :: InitMethod, MaskVariable    
    INTEGER :: i,j,offset,nonodes
    INTEGER, POINTER :: MaskPerm(:), InvPerm(:)
    LOGICAL :: GotIt, GotMask
    REAL(KIND=dp), POINTER :: InitialValues(:,:)
    REAL(KIND=dp) :: mass,boltz,temp,coeff 
    

    Coords = 0.0_dp
    Velo = 0.0_dp
    Dist = 0.0_dp


    !------------------------------------------------------------------------
    ! The user may use a mask to initialize the particles only at a part of the 
    ! domain, or to utilize the ordeing of the permutation vector.
    !-------------------------------------------------------------------------

    GotMask = .FALSE.
    nonodes = Solver % Mesh % NumberOfNodes

    MaskVariable = ListGetString( Solver % Values,'Mask Variable Name',GotIt )
    IF(GotIt) THEN
      Var => VariableGet( Model % Variables, TRIM(VariableName) )
      IF( ASSOCIATED( Var ) ) THEN
        MaskPerm => Var % Perm
        IF( ASSOCIATED(MaskPerm) ) THEN
          GotMask = .TRUE.
          nonodes = MAXVAL( MaskPerm ) 
          ALLOCATE( InvPerm(nonodes) )
          DO i=1,SIZE(MaskPerm)
            j = MaskPerm(i)
            IF( j > 0 ) InvPerm(j) = i
          END DO
        END IF
      END IF
    END IF
    
    !------------------------------------------------------------------------
    ! Position may be initialized using a given list, or using the nodal
    ! coordinates to initalize positions.
    !-------------------------------------------------------------------------

    InitMethod = ListGetString( Solver % Values,'Position Initialization Method',gotIt ) 

    SELECT CASE ( InitMethod ) 

      CASE ('nodal ordered')
        DO i=1,NoParticles
          j = MODULO( i * NoParticles -1 , nonodes ) + 1
          IF( GotMask ) j = InvPerm(j)
          Coords(DIM*(i-1)+1) = Mesh % Nodes % x(j)
          Coords(DIM*(i-1)+2) = Mesh % Nodes % y(j)
          IF( dim == 3 ) Coords(DIM*(i-1)+3) = Mesh % Nodes % z(j)
        END DO

      CASE DEFAULT 
      
      InitialValues => ListGetConstRealArray(Solver % Values,'Initial Coordinates',gotIt)    
      IF(gotIt) THEN
        IF( SIZE(InitialValues,2) /= DIM ) THEN
          CALL Fatal('ParticleTracker','Wrong dimension in Initial Coordinates')
        ELSE IF( SIZE(InitialValues,1) == 1 ) THEN
          DO i=1,NoParticles
            Coords(DIM*(i-1)+1:DIM*i) = InitialValues(1,1:DIM)
          END DO
        ELSE IF( SIZE(InitialValues,1) /= NoParticles ) THEN
          CALL Fatal('ParticleTracker','Wrong number of particles in Initial Coordinates')
        ELSE
          DO i=1,NoParticles
            Coords(DIM*(i-1)+1:DIM*i) = InitialValues(i,1:DIM)
          END DO
        END IF
      ELSE
        CALL Fatal('ParticleTracker','Initial Coordinates not given')
      END IF
    END SELECT


    !------------------------------------------------------------------------
    ! Velocities may be initialized using a given list, or obtaining them
    ! from a thermal maxwell boltzmann distribution. These are additive to 
    ! allow bulk velocities with the thermal one.
    !-------------------------------------------------------------------------

    InitialValues => ListGetConstRealArray(Solver % Values,'Initial Velocities',gotIt)
    IF(gotIt) THEN
      IF( SIZE(InitialValues,2) /= DIM ) THEN
        CALL Fatal('ParticleTracker','Wrong dimension in Initial Velocities')
      ELSE IF( SIZE(InitialValues,1) == 1 ) THEN
        DO i=1,NoParticles
          Velo(DIM*(i-1)+1:DIM*i) = InitialValues(1,1:DIM)
        END DO
      ELSE IF( SIZE(InitialValues,1) /= NoParticles ) THEN
        CALL Fatal('ParticleTracker','Wrong number of particles in Initial Velocities')
      ELSE
        DO i=1,NoParticles
          Velo(DIM*(i-1)+1:DIM*i) = InitialValues(i,1:DIM)
        END DO
      END IF
    END IF



    InitMethod = ListGetString( Solver % Values,'Velocity Initialization Method',gotIt ) 

    SELECT CASE ( InitMethod ) 
      
    CASE ('thermal')  
      
      mass = GetCReal( Solver % Values,'Particle Mass')
      temp = GetCReal( Solver % Values,'Particle Temperature')
      boltz = GetConstReal( Model % Constants,'Boltzmann constant')
      coeff = SQRT(boltz * temp / mass )

      DO i=1,NoParticles
        Velo(DIM*(i-1)+1) = Velo(DIM*(i-1)+1) + coeff * NormalRandom()
        Velo(DIM*(i-1)+2) = Velo(DIM*(i-1)+2) + coeff * NormalRandom()
        IF( dim == 3 ) Velo(DIM*(i-1)+3) = Velo(DIM*(i-1)+3) + coeff * NormalRandom()
      END DO

    CASE DEFAULT

    END SELECT


    IF( GotMask ) DEALLOCATE( InvPerm ) 


  END SUBROUTINE InitializeParticles


  !------------------------------------------------------------------------
  ! Open a numbered file for each particle. These must be separate since the 
  ! number of steps for each particle may vary greatly
  !-------------------------------------------------------------------------
  SUBROUTINE OpenParticleFile( ) 

    INTEGER :: FileNo
    CHARACTER(LEN=MAX_NAME_LEN) :: FilePrefix, FileName
    LOGICAL :: Visited = .FALSE.

    SAVE :: Visited, FilePrefix
    
    IF( .NOT. Visited ) THEN
      FilePrefix = ListGetString(Solver % Values,'Filename Prefix',GotIt )
      IF(.NOT. GotIt) FilePrefix = 'track'
      Visited = .TRUE.
    END IF

    IF( NumberFilesByParticles ) THEN
      fileno = No
    ELSE IF( NumberFilesBySteps ) THEN
      fileno = VisitedTimes + 1
    ELSE
      fileno = 0
    END IF

    IF( FileNo == 0 ) THEN
       WRITE( FileName,'(A,A)') TRIM(FilePrefix),'.dat'
       CALL Info( 'ParticleTracker', 'Saving particle paths to file: '//TRIM(FileName), Level=4 )
    ELSE IF( FileNo < 10 ) THEN
       IF( No == 1 ) THEN
          WRITE( Message, * ) 'Saving particle paths to files: ', TRIM(FilePrefix)//'_*.dat'
          CALL Info( 'ParticleTracker', Message, Level=4 )
       END IF
       WRITE( FileName,'(A,A,I1,A)') TRIM(FilePrefix),'_',fileno,'.dat'
    ELSE IF( No < 100 ) THEN
       WRITE( FileName,'(A,A,I2,A)') TRIM(FilePrefix),'_',fileno,'.dat'
    ELSE IF( No < 1000 ) THEN
       WRITE( FileName,'(A,A,I3,A)') TRIM(FilePrefix),'_',fileno,'.dat'
    END IF

    IF( VisitedTimes == 0 .OR. NumberFilesBySteps ) THEN
      OPEN (10, FILE=FileName )
    ELSE
      OPEN (10, FILE=FileName,POSITION='APPEND' )
    END IF
  END SUBROUTINE OpenParticleFile

 
  !------------------------------------------------------------------------
  ! Save one line in the particle file
  !-------------------------------------------------------------------------
  SUBROUTINE SaveParticleStep(  )

    WRITE( 10, * ) time, Coords(Inds), Velo(Inds), Dist(No) 

  END SUBROUTINE SaveParticleStep
  

  !------------------------------------------------------------------------
  ! Close the particle file
  !-------------------------------------------------------------------------
  SUBROUTINE CloseParticleFile( )

    CLOSE( 10 )

  END SUBROUTINE CloseParticleFile



  !------------------------------------------------------------------------
  ! Write the names file for user information. Remember to update this if 
  ! SaveParticleStep is modified.
  !-------------------------------------------------------------------------
  SUBROUTINE WriteNamesFile( ) 

    CHARACTER(LEN=MAX_NAME_LEN) :: FilePrefix, FileName
    INTEGER :: i,j
    LOGICAL :: Visited = .FALSE.

    SAVE :: Visited

    IF( Visited ) RETURN
        
    FilePrefix = ListGetString(Solver % Values,'Filename Prefix',GotIt )
    IF(.NOT. GotIt) FilePrefix = 'track'

    WRITE( FileName,'(A,A)') TRIM(FilePrefix),'.dat.names'

    OPEN (10, FILE=FileName )

    WRITE( 10, '(A)' ) 'Variables in file: '//TRIM(FilePrefix)//'*.dat'
    i = 1
    WRITE( 10, '(I2,A)' )  i,': time'
    WRITE( 10, '(I2,A)' )  i+1,': Coordinate_1'
    WRITE( 10, '(I2,A)' )  i+2,': Coordinate_2'
    IF(DIM == 3) WRITE( 10, '(I2,A)' )  i+3,': Coordinate_3'
    i = i + DIM
    WRITE( 10, '(I2,A)' )  i+1,': Velocity_1'
    WRITE( 10, '(I2,A)' )  i+2,': Velocity_2'
    IF(DIM == 3) WRITE( 10, '(I2,A)' )  i+3,': Velocity_3'
    i = i + DIM
    WRITE( 10, '(I2,A)' )  i+1,': Distance'
    i = i + 1

    CLOSE( 10 )

    Visited = .TRUE.

  END SUBROUTINE WriteNamesFile
  


  !-------------------------------------------------------------------------
  ! Evaluate cost function based on the solution. This is in no way generic.
  ! Here we assume a desired end-coordinates.
  ! Note that this is not good in that it is dt-dependent which creates some noise.
  ! It would be best to find the shortest distance of | r + a * v -r_0 | i.e.
  ! using the velocity field find the shortest true distance. Even here one should
  ! check that the parameter a is smaller than dt...
  !-------------------------------------------------------------------------

  SUBROUTINE EvaluateCostFunction( )

    REAL(KIND=dp) :: dr(3), ds, dssum
    REAL(KIND=dp), POINTER :: TargetValues(:,:)

    
    dssum = 0.0_dp
    TargetValues => ListGetConstRealArray(Solver % Values,'Target Coordinates')
    
    DO i=1,NoParticles
      dr(1:DIM) = TargetValues(i,1:DIM) - Coords(DIM*(i-1)+1:DIM*i)
      ds = SQRT( SUM( dr(1:DIM) ** 2 ) )
      dssum = dssum + ds
    END DO

    PRINT *,'cost function: ',dssum
    CALL ListAddConstReal( Model % Simulation,'res: Cost Function',dssum )

  END SUBROUTINE EvaluateCostFunction



  !------------------------------------------------------------------------
  ! Compute field values at the given points in the FE mesh. 
  !-------------------------------------------------------------------------
  SUBROUTINE ComputeFieldsAtPoint(GlobalCoords, OutOfScope, GradientAtPoint, VeloAtPoint, &
       GradVeloAtPoint, ElementSize ) 

    
    LOGICAL :: OutOfScope
    REAL(KIND=dp) :: GlobalCoords(3), GradientAtPoint(3),VeloAtPoint(3)
    REAL(KIND=dp), OPTIONAL :: GradVeloAtPoint(3,3), ElementSize


    LOGICAL :: Stat, Visited = .FALSE., Hit, DummySearch
    INTEGER :: i,j,k,n
    REAL(KIND=dp) :: u,v,w,LocalCoords(3),SqrtElementMetric
    REAL(KIND=dp), POINTER :: Basis(:), dBasisdx(:,:)
    TYPE(Nodes_t) :: ElementNodes
    INTEGER, POINTER :: NodeIndexes(:)
    TYPE(Element_t), POINTER :: CurrentElement

    TYPE ElementP
      TYPE(Element_t), POINTER :: Element => Null()
    END TYPE ElementP
    
    TYPE(ElementP), ALLOCATABLE, SAVE :: Elements(:)

    TYPE(Quadrant_t), POINTER, SAVE :: RootQuadrant =>Null(), LeafQuadrant
    REAL(kind=dp) :: BoundingBox(6), eps2, eps1 = 1e-3


    SAVE :: CurrentElement, ElementNodes, Basis, dBasisdx

    IF( .NOT. Visited ) THEN
       n = Solver % Mesh % MaxElementNodes
       ALLOCATE( ElementNodes % x(n), ElementNodes % y(n), ElementNodes % z(n))
       ALLOCATE( Basis(n), dBasisdx(n, 3), Elements(NoParticles) )
       NULLIFY( CurrentElement )
       Visited = .TRUE.
    END IF
      
    counter(3) = counter(3) + 1
    GradientAtPoint = 0.0_dp
    VeloAtPoint = 0.0_dp
    Hit = .FALSE.
    DummySearch = .FALSE.


    ! Check that the previous hit is not hit even now
    !-------------------------------------------------

    Currentelement => elements(no) % element
    IF ( ASSOCIATED(CurrentElement) ) THEN
      n = CurrentElement % TYPE % NumberOfNodes
      NodeIndexes => CurrentElement % NodeIndexes
      
      ElementNodes % x(1:n) = Mesh % Nodes % x(NodeIndexes)
      ElementNodes % y(1:n) = Mesh % Nodes % y(NodeIndexes)
      ElementNodes % z(1:n) = Mesh % Nodes % z(NodeIndexes)
      
      IF ( PointInElement( CurrentElement, ElementNodes, &
          GlobalCoords, LocalCoords ) ) THEN
        counter(5) = counter(5) + 1
        Hit = .TRUE.
      END IF
    END IF


    IF(.NOT. Hit) THEN

      IF( DummySearch ) THEN
        
        !----------------------------------------------------------
        ! Go through all bulk elements in a dummy search.
        ! This algorithm is mainly here for debugging purposes.
        !----------------------------------------------------------
        DO k=1,Solver % Mesh % NumberOfBulkElements
          CurrentElement => Mesh % Elements(k)
          n = CurrentElement % TYPE % NumberOfNodes
          NodeIndexes => CurrentElement % NodeIndexes
          
          ElementNodes % x(1:n) = Mesh % Nodes % x(NodeIndexes)
          ElementNodes % y(1:n) = Mesh % Nodes % y(NodeIndexes)
          ElementNodes % z(1:n) = Mesh % Nodes % z(NodeIndexes)
          
          IF ( PointInElement( CurrentElement, ElementNodes, &
              GlobalCoords, LocalCoords ) ) THEN
            Hit = .TRUE.
            EXIT
          END IF
        END DO
        
      ELSE

        !-----------------------------------------------
        ! Find the right element using an octree search
        ! This is the preferred algorithms of the two.
        !-----------------------------------------------
        IF ( .NOT.ASSOCIATED( Mesh % RootQuadrant ) ) THEN
          BoundingBox(1) = MINVAL( Mesh % Nodes % x )
          BoundingBox(2) = MINVAL( Mesh % Nodes % y )
          BoundingBox(3) = MINVAL( Mesh % Nodes % z )
          BoundingBox(4) = MAXVAL( Mesh % Nodes % x )
          BoundingBox(5) = MAXVAL( Mesh % Nodes % y )
          BoundingBox(6) = MAXVAL( Mesh % Nodes % z )
          
          eps2 = eps1 * MAXVAL( BoundingBox(4:6) - BoundingBox(1:3) )
          BoundingBox(1:3) = BoundingBox(1:3) - eps2
          BoundingBox(4:6) = BoundingBox(4:6) + eps2
          
          CALL BuildQuadrantTree( Mesh,BoundingBox,Mesh % RootQuadrant)
        END IF

        RootQuadrant => Mesh % RootQuadrant
        IF ( ASSOCIATED(RootQuadrant) ) THEN
          NULLIFY(CurrentElement)
          CALL FindLeafElements(GlobalCoords, dim, RootQuadrant, LeafQuadrant)
          IF ( ASSOCIATED(LeafQuadrant) ) THEN
            DO k=1, LeafQuadrant % NElemsInQuadrant
              CurrentElement => Mesh % Elements(LeafQuadrant % Elements(k))
              
              n = CurrentElement % TYPE % NumberOfNodes
              NodeIndexes => CurrentElement % NodeIndexes
              
              ElementNodes % x(1:n) = Mesh % Nodes % x(NodeIndexes)
              ElementNodes % y(1:n) = Mesh % Nodes % y(NodeIndexes)
              ElementNodes % z(1:n) = Mesh % Nodes % z(NodeIndexes)
              
              IF ( PointInElement( CurrentElement, ElementNodes, &
                  GlobalCoords, LocalCoords ) ) THEN
                Hit = .TRUE.
                EXIT
              END IF
            END DO
          END IF
        END IF
        
      END IF
    END IF

!------------------------------------------------------------------------------


    IF ( Hit ) THEN
      
      Elements(no) % Element => CurrentElement
      counter(4) = counter(4) + 1
      
      u = LocalCoords(1)
      v = LocalCoords(2)
      w = LocalCoords(3)
      
      stat = ElementInfo( CurrentElement, ElementNodes, U, V, W, SqrtElementMetric, &
          Basis, dBasisdx )
      
      ! Compute the representative size of the elements
      IF( PRESENT(ElementSize) ) ElementSize = SqrtElementMetric ** ( 1.0_dp / DIM )
      
      IF( GotPotField ) THEN
        IF( ALL ( PotFieldPerm( NodeIndexes) > 0 )) THEN
          DO i=1,DIM
            GradientAtPoint(i) = &
                SUM( dBasisdx(1:n,i) * PotField( PotFieldPerm( NodeIndexes ) ) )
          END DO
        END IF
      END IF
      
      IF( GotVeloField ) THEN
        IF( ALL ( VeloFieldPerm( NodeIndexes) > 0 )) THEN
          DO i=1,DIM
            VeloAtPoint(i) = SUM( Basis(1:n) * &
                VeloField( VeloFieldDofs*( VeloFieldPerm( NodeIndexes )-1)+i ) )
            
            IF( PRESENT(GradVeloAtPoint) .AND. IntegMethod == 2 ) THEN
              DO j=1,DIM
                GradVeloAtPoint(i,j) = SUM( dBasisdx(1:n,j) * &
                    VeloField( VeloFieldDofs*( VeloFieldPerm( NodeIndexes )-1)+i ) )                  
              END DO
            END IF
          END DO
        END IF
      END IF
      
      ! for debugging purposes
      IF(.FALSE.) THEN
        PRINT *,'x:',SUM( Basis(1:n) * Mesh % Nodes % x( NodeIndexes ) )
        PRINT *,'y:',SUM( Basis(1:n) * Mesh % Nodes % y( NodeIndexes ) )
        PRINT *,'z:',SUM( Basis(1:n) * Mesh % Nodes % z( NodeIndexes ) )
        PRINT *,'GradAtPoint:',GradientAtPoint
        PRINT *,'VeloAtPoint:i',VeloAtPoint
        CALL flush(6)
      END IF
    ELSE
      counter(6) = counter(6) + 1
    END IF
    
    OutOfScope = .NOT. Hit
    
    
  END SUBROUTINE ComputeFieldsAtPoint
  
!------------------------------------------------------------------------------
END SUBROUTINE ParticleTracker
!------------------------------------------------------------------------------


